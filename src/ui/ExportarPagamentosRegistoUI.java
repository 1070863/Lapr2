package ui;

import controller.DefinirValoresRegistoController;
import controller.ExportarPagamentosRegistoController;
import eventoscientificos.Empresa;
import eventoscientificos.Evento;
import java.io.FileNotFoundException;
import java.util.List;
import javax.security.auth.callback.ConfirmationCallback;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;

/**
 * Janela de interface gráfica para a exportação do registo de pagamentos de
 * registos no evento.
 *
 * @author Grupo 66 LAPR2
 */
public class ExportarPagamentosRegistoUI extends javax.swing.JDialog {

    private ExportarPagamentosRegistoController m_controllerEPR;
    private static String strId;
    private static Empresa m_empresa;
    private Evento m_eventoSelecionado;
    private static final int JANELA_POSICAO_X = 500;
    private static final int JANELA_POSICAO_Y = 100;

    /**
     * Creates new form ExportarPagamentosRegisto
     */
    public ExportarPagamentosRegistoUI(javax.swing.JFrame pai, boolean modal, Empresa empresa, String id) {
        super(pai, "Exportar Pagamentos de Registo", modal);

        m_empresa = empresa;
        strId = id;
        m_controllerEPR = new ExportarPagamentosRegistoController(m_empresa);
        List<Evento> le = this.m_controllerEPR.getEventosOrgDataRegistoPassada(strId);
        m_eventoSelecionado = apresentaEventosOrganizador(le);
        m_controllerEPR.selectEvento(m_eventoSelecionado);
        initComponents();

        pack();
        setResizable(false);
        setLocation(JANELA_POSICAO_X, JANELA_POSICAO_Y);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcbEventos = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jtfFileName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("Selecione o Evento:");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Exportar Pagamentos de Registos");

        jLabel2.setText("Nome do ficheiro a ser criado:");

        jtfFileName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton1.setText("Exportar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jtfFileName, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(27, 27, 27))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(72, 72, 72)
                .addComponent(jButton2)
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jtfFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Tratamento do evento gerado pelo botão cancelar.
     *
     * @param evt botão cancelar premido
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this,
                "Cancelar a exportação dos Registos no Evento?", "Confirmar", ConfirmationCallback.YES_NO_OPTION);
        if (confirma == 0) {
            dispose();
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Tratamento do evento gerado pelo botão exportar.
     *
     * @param evt botão exportar premido
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String[] aux = jtfFileName.getText().split(".");

        if (aux[2].equalsIgnoreCase("csv") || aux.length != 2) {
            JOptionPane.showMessageDialog(this, "Nome do ficheiro inválido. Reescreva o nome e a extensão de acordo com o exemplo(example.csv)",
                    "Exportar Pagamentos de Registo", ERROR_MESSAGE);
            jtfFileName.requestFocus();
        } else {
            int confirma = JOptionPane.showConfirmDialog(this,
                    "Exportar os registos para o ficheiro " + jtfFileName.getText() + "?", "Confirmar", ConfirmationCallback.YES_NO_OPTION);
            if (confirma == 0) {
                try {
                    this.m_controllerEPR.escreveCSV(jtfFileName.getText());
                    JOptionPane.showMessageDialog(null, "Ficheiro exportado com sucesso.");
                    dispose();
                } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(null, "Não foi possível escrever o ficheiro.",
                            "Exportar Pagamentos de Registo", ERROR_MESSAGE);
                    dispose();
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportarPagamentosRegistoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportarPagamentosRegistoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportarPagamentosRegistoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportarPagamentosRegistoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ExportarPagamentosRegistoUI dialog = new ExportarPagamentosRegistoUI(new javax.swing.JFrame(), true, m_empresa, strId);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox jcbEventos;
    private javax.swing.JTextField jtfFileName;
    // End of variables declaration//GEN-END:variables

    /**
     * Apresenta a lista de eventos do Organizador e permite selecionar o Evento
     * para o qual irá criar definir os valores de Registo.
     *
     * @param le lista de eventos do Organizador
     * @return Evento para o qual devem ser definidos os valores de registo
     */
    private Evento apresentaEventosOrganizador(List<Evento> le) {
        String[] lstEventos = new String[le.size()];
        for (int i = 0; i < lstEventos.length; i++) {
            lstEventos[i] = le.get(i).getM_strTitulo();
        }
        String eventoSelected = (String) JOptionPane.showInputDialog(this,
                "Selecione o Evento",
                "Selecionar Evento",
                JOptionPane.QUESTION_MESSAGE,
                null,
                lstEventos,
                lstEventos[0]);

        Evento e = null;
        for (int i = 0; i < le.size(); i++) {
            if (le.get(i).getM_strTitulo().equalsIgnoreCase(eventoSelected)) {
                e = le.get(i);
            }
        }
        return e;
    }
}
